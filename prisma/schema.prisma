datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int            @id @default(autoincrement())
  userId         String         @unique
  first_name     String
  last_name      String
  emailAddresses EmailAddress[]
  agencyId       Int?
  agency         Agency?        @relation(fields: [agencyId], references: [id])
  clients        Client[]
  requests       Request[]
  isBanned       Boolean        @default(false)

  @@index([userId, agencyId])
}

model EmailAddress {
  id     Int    @id @default(autoincrement())
  email  String @unique
  userId String
  user   User   @relation(fields: [userId], references: [userId])
}

model Agency {
  id    Int    @id @default(autoincrement())
  name  String
  users User[]
}

model Client {
  id          Int       @id @default(autoincrement())
  fullName    String
  contactInfo String? // Optional contact information
  clientID    String    @unique
  caseNumber  String? // Optional case number
  age         Int?
  sex         String?
  race        String?
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  requests    Request[]

  @@index([userId, clientID])
}

model Fund {
  id         Int      @id @default(autoincrement())
  requestId  Int
  request    Request  @relation(fields: [requestId], references: [id])
  fundTypeId Int
  fundType   FundType @relation(fields: [fundTypeId], references: [id])
  amount     Decimal? // Nullable for non-monetary funds like bus passes
  details    String? // JSON string or link to more detailed information
}

model FundType {
  id       Int    @id @default(autoincrement())
  typeName String
  funds    Fund[]
}

model Request {
  id                  Int                 @id @default(autoincrement())
  clientId            Int
  client              Client              @relation(fields: [clientId], references: [id])
  userId              Int
  user                User                @relation(fields: [userId], references: [id])
  status              String
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  requestFormAnswer   RequestFormAnswers?
  preScreenAnswer     PreScreenAnswers?
  postScreenAnswer    PostScreenAnswers?
  requestFormAnswerId Int?
  preScreenAnswerId   Int?
  postScreenAnswerId  Int?
  Fund                Fund[]

  @@index([clientId, userId])
}

model RequestFormAnswers {
  id        Int      @id @default(autoincrement())
  answers   Json
  createdAt DateTime @default(now())
  requestId Int      @unique
  request   Request  @relation(fields: [requestId], references: [id])

  @@index([requestId])
}

model PreScreenAnswers {
  id        Int      @id @default(autoincrement())
  answers   Json
  createdAt DateTime @default(now())
  requestId Int      @unique
  request   Request  @relation(fields: [requestId], references: [id])

  @@index([requestId])
}

model PostScreenAnswers {
  id        Int      @id @default(autoincrement())
  answers   Json
  createdAt DateTime @default(now())
  requestId Int      @unique
  request   Request  @relation(fields: [requestId], references: [id])

  @@index([requestId])
}
