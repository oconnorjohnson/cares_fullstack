datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int            @id @default(autoincrement())
  userId         String         @unique
  first_name     String
  last_name      String
  emailAddresses EmailAddress[]
  clients        Client[]
  requests       Request[]
  isBanned       Boolean        @default(false)
  fundTypes      FundType[]
  Agency         Agency[]
  Receipt        Receipt[]

  @@index([userId])
}

model EmailAddress {
  id     Int    @id @default(autoincrement())
  email  String @unique
  userId String
  user   User   @relation(fields: [userId], references: [userId])

  @@index([userId])
}

model Agency {
  id       Int       @id @default(autoincrement())
  name     String
  userId   String
  user     User      @relation(fields: [userId], references: [userId])
  requests Request[]

  @@index([userId])
}

model Client {
  id          Int       @id @default(autoincrement())
  clientId    String?   @unique
  first_name  String?
  last_name   String?
  contactInfo String?
  caseNumber  String?
  dateOfBirth DateTime?
  sex         String
  race        String
  userId      String
  user        User      @relation(fields: [userId], references: [userId])
  requests    Request[]

  @@index([userId])
}

model Fund {
  id           Int      @id @default(autoincrement())
  requestId    Int
  request      Request  @relation(fields: [requestId], references: [id])
  fundTypeId   Int
  fundType     FundType @relation(fields: [fundTypeId], references: [id])
  amount       Int
  needsReceipt Boolean  @default(false)
  Receipt      Receipt?

  @@index([requestId, fundTypeId])
}

model FundType {
  id       Int    @id @default(autoincrement())
  typeName String
  funds    Fund[]
  userId   String
  user     User   @relation(fields: [userId], references: [userId])

  @@index([userId])
}

model Request {
  id                 Int                @id @default(autoincrement())
  clientId           Int
  client             Client             @relation(fields: [clientId], references: [id])
  userId             String
  user               User               @relation(fields: [userId], references: [userId])
  agencyId           Int
  agency             Agency             @relation(fields: [agencyId], references: [id])
  pendingApproval    Boolean            @default(true)
  denied             Boolean            @default(false)
  approved           Boolean            @default(false)
  pendingPayout      Boolean            @default(false)
  paid               Boolean            @default(false)
  hasPreScreen       Boolean            @default(false)
  needsReceipts      Boolean            @default(false)
  hasReceipts        Boolean            @default(false)
  hasPostScreen      Boolean            @default(false)
  createdAt          DateTime           @default(now())
  details            String             @db.Text
  implementation     String             @db.Text
  sustainability     String             @db.Text
  preScreenAnswer    PreScreenAnswers?
  postScreenAnswer   PostScreenAnswers?
  agreementUrl       String?
  preScreenAnswerId  Int?
  postScreenAnswerId Int?
  funds              Fund[]

  SDOHs   SDOH[]
  RFFs    RFF[]
  Receipt Receipt[]

  @@index([clientId, userId, agencyId])
}

model Receipt {
  id        Int     @id @default(autoincrement())
  url       String
  requestId Int
  fundId    Int     @unique
  userId    String
  request   Request @relation(fields: [requestId], references: [id])
  fund      Fund    @relation(fields: [fundId], references: [id])
  user      User    @relation(fields: [userId], references: [userId])

  @@index([requestId, fundId, userId])
}

model SDOH {
  id        Int     @id @default(autoincrement())
  value     String
  requestId Int
  request   Request @relation(fields: [requestId], references: [id])
}

model RFF {
  id        Int     @id @default(autoincrement())
  value     String
  requestId Int
  request   Request @relation(fields: [requestId], references: [id])
}

model PreScreenAnswers {
  id                    Int      @id @default(autoincrement())
  housingSituation      Int
  housingQuality        Int
  utilityStress         Int
  foodInsecurityStress  Int
  foodMoneyStress       Int
  transpoConfidence     Int
  transpoStress         Int
  financialDifficulties Int
  additionalInformation String   @db.Text
  createdAt             DateTime @default(now())
  requestId             Int      @unique
  request               Request  @relation(fields: [requestId], references: [id])

  @@index([requestId])
}

model PostScreenAnswers {
  id                    Int      @id @default(autoincrement())
  housingSituation      Int
  housingQuality        Int
  utilityStress         Int
  foodInsecurityStress  Int
  foodMoneyStress       Int
  transpoConfidence     Int
  transpoStress         Int
  financialDifficulties Int
  additionalInformation String   @db.Text
  createdAt             DateTime @default(now())
  requestId             Int      @unique
  request               Request  @relation(fields: [requestId], references: [id])

  @@index([requestId])
}
